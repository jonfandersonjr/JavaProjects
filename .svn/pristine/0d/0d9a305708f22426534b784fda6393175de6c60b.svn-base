/*
 * TCSS 305 - Tetris
 */
package view;

import java.awt.BasicStroke;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.Timer;
import model.TetrisPiece;

/**
 * Panel which will hold and keep track of the score and other 
 * information pertaining to the game.
 * 
 * @author Jon Anderson
 * @version June 1
 */
public class ScorePanel extends JSplitPane implements Observer {
    
    /**
     * Auto generated serial ID.
     */
    private static final long serialVersionUID = 118141119856970403L;

    /**
     * Width of the border for this panel.
     */
    private static final int STROKE = 3;
    
    /**
     * Amount of plain font JLabel's.
     */
    private static final int PLAIN_FONTS = 3;
    
    /**
     * Increments score by this much when a piece is dropped.
     */
    private static final int SCORE_MOD = 4;
    
    /**
     * Modifier for the size of the panels.
     */
    private static final int PANEL_MOD = 7;
    
    /**
     * Modifier for the location of the split panel divider.
     */
    private static final int DIVIDER_MOD = 6;
    
    /**
     * Modifies the size of the labels using the block size.
     */
    private static final double LABEL_SIZE_MODIFIER = 1.25;
    
    /**
     * How much the game needs to speed up per level up.
     */
    private static final int INCREMENT_TIMER = 75;
    
    /**
     * Multiplier for one line completed.
     */
    private static final int ONE_MULT = 40;
    
    /**
     * Multiplier for two lines completed.
     */
    private static final int TWO_MULT = 100;
    
    /**
     * Multiplier for three lines completed.
     */
    private static final int THREE_MULT = 300;
    
    /**
     * Multiplier for four lines completed.
     */
    private static final int FOUR_MULT = 1200;

    /**
     * String representing zero.
     */
    private static final String ZERO = "0";
    
    /**
     * List of the labels in this panel.
     */
    private final List<JLabel> myLabels = new ArrayList<JLabel>();
    
    /**
     * Label for displaying the score.
     */
    private final JLabel myScore = addLabel(ZERO);
    
    /**
     * Label for lines currently cleared.
     */
    private final JLabel myCleared = addLabel(ZERO);
    
    /**
     * Label displaying the current level.
     */
    private final JLabel myCurrentLevel = addLabel("1");
    
    /**
     * Amount of lines to get to the next level.
     */
    private final JLabel myNextLevel;
    
    /**
     * The block size for this game.
     */
    private final int myBlockSize;
    
    /**
     * myRequirement for the amount of lines that need to be cleared for next level.
     */
    private final int myRequirement;
    
    /**
     * The amount of lines the user has cleared.
     */
    private int myLinesCleared;
    
    /**
     * The level the user is on.
     */
    private int myLevel = 1;
    
    /**
     * Keeps track of how many lines the user has completed in respect to the amount required.
     */
    private int myCounter;
    
    /**
     * Int which keeps track of the user's score.
     */
    private int myScoreValue = -SCORE_MOD;
    
    /**
     * The timer for the game.
     */
    private final Timer myTimer;
    
    /**
     * Constructs a score panel to keep track of various information pertaining to the game.
     * @param theBlockSize to base this panel size on.
     * @param theLineRequirement to move on to the next level.
     * @param theTimer for the game.
     */
    public ScorePanel(final int theBlockSize, final int theLineRequirement,
                      final Timer theTimer) {
        super();
        myNextLevel = addLabel(String.valueOf(theLineRequirement));
        myBlockSize = theBlockSize;
        myTimer = theTimer;
        myRequirement = theLineRequirement;
        modSize();
        setBorder(BorderFactory.createStrokeBorder(new BasicStroke(STROKE)));
    }
    
    /**
     * Modifies the size of the panel.
     */
    private void modSize() {
        setPreferredSize(new Dimension(myBlockSize * PANEL_MOD, 
                                       myBlockSize * PANEL_MOD));
        setDividerSize(0);
        setDividerLocation(myBlockSize * DIVIDER_MOD);
        setOrientation(JSplitPane.HORIZONTAL_SPLIT);
        setLeftComponent(boldLabelPanel());
        setRightComponent(plainLabelPanel());
    }
    
    /**
     * Creates a panel with the bold labels for the west.
     * @return the created west panel.
     */
    private JPanel boldLabelPanel() {
        final JPanel panel = new JPanel(new GridLayout(4, 1));
        panel.add(addLabel("Current Score:"));
        panel.add(addLabel("Lines Cleared:"));
        panel.add(addLabel("Current Level:"));
        panel.add(addLabel("For Next Level: "));
        return panel;
    }
    
    /**
     * Adds the plain labels to the east panel.
     * @return the created east panel.
     */
    private JPanel plainLabelPanel() {
        final JPanel panel = new JPanel(new GridLayout(4, 1));
        panel.add(myScore);
        panel.add(myCleared);
        panel.add(myCurrentLevel);
        panel.add(myNextLevel);
        setFont();
        return panel;
    }
    
    /**
     * Creates a label and adds it to myLabel list.
     * @param theLabel name for the created label.
     * @return the created label.
     */
    private JLabel addLabel(final String theLabel) {
        final JLabel label = new JLabel(theLabel);
        myLabels.add(label);
        return label;
    }

    /**
     * Sets the fonts for all the labels.
     */
    private void setFont() {
        final Font boldFont = new Font(Font.SERIF, Font.BOLD,
                                       (int) (myBlockSize / LABEL_SIZE_MODIFIER));
        final Font plainFont = new Font("Osaka", Font.ITALIC,
                                        (int) (myBlockSize / LABEL_SIZE_MODIFIER));
        int count = 0;
        for (final JLabel label: myLabels) {
            label.setFont(plainFont);
            if (count > PLAIN_FONTS) {
                label.setFont(boldFont);
            }
            count++;
        }
    }

    @Override
    public void update(final Observable theObserv, final Object theObject) {
        if (theObject instanceof TetrisPiece) {
            myScoreValue += SCORE_MOD;
            myScore.setText(String.valueOf(myScoreValue));
        }
        if (theObject instanceof Integer[]) {
            updateDisplay(((Integer[]) theObject).length);
            calculateScore(((Integer[]) theObject).length);
        }
    }
    
    /**
     * Updates all the labels except for the score.
     * @param theLines that have been cleared.
     */
    private void updateDisplay(final int theLines) {
        myCounter += theLines;
        myLinesCleared += theLines;
        myCleared.setText(String.valueOf(myLinesCleared));
        if (myCounter >= myRequirement) {
            System.out.println("Passed the requirement");
            myLevel++;
            myCurrentLevel.setText(String.valueOf(myLevel));
            myTimer.setDelay(myTimer.getDelay() - INCREMENT_TIMER);
            myCounter = myCounter % myRequirement;
        }
        myNextLevel.setText(String.valueOf(myRequirement - myCounter));
    }
    
    /**
     * Calculates the score of the game after clearing lines.
     * @param theLines that were cleared.
     */
    private void calculateScore(final int theLines) {
        switch (theLines) {
            case 1: myScoreValue += ONE_MULT * myLevel;
                break;
            case 2: myScoreValue += TWO_MULT * myLevel;
                break;
            case 3: myScoreValue += THREE_MULT * myLevel;
                break;
            case 4: myScoreValue += FOUR_MULT * myLevel;
                break;
            default: myScoreValue += 0;
                break;
        }
        myScore.setText(String.valueOf(myScoreValue));
    }

}
