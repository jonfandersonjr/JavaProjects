package view;

import buttonactions.NewGame;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.Timer;
import model.Board;

/**
 * Constructs a panel where the user will play the Tetris game.
 * 
 * @author Jon Anderson
 * @version May 18
 *
 */
public class GamePanel extends JPanel implements Observer {
    
    /**
     * Auto generated serial ID number.
     */
    private static final long serialVersionUID = 8522478904937779609L;
    
    /**
     * Delay for timer.
     */
    private static final int TIMER_DELAY = 1000;
    
    /**
     * Swing timer for the game.
     */
    private final Timer myTimer = new Timer(TIMER_DELAY, new NewGame());
    
    /**
     * Sets a preferred original size of the Tetris game area.
     */
    private final Dimension myPreferredSize = new Dimension(800, 800);
    
    /**
     * The Board that will be used for the game.
     */
    private final Board myBoard;
    
    private Rectangle2D myPiece;

    /**
     * Creates the tetris game area with default features.
     * @param theBoard that will be used for this game.
     */
    public GamePanel(final Board theBoard) {
        super();
        setPreferredSize(myPreferredSize);
        setBorder(BorderFactory.createStrokeBorder(new BasicStroke(8)));
        setBackground(Color.LIGHT_GRAY);
        myBoard = theBoard;
        myBoard.newGame();
    }

    @Override
    public void update(final Observable theObserv, final Object theObject) {
       // if (theObserv instanceof Board) {
            //((Board) theObserv).drop();
            System.out.println(theObject.toString());
            //myBoard.step();
            System.out.println("Listened Successfully");
            //repaint();
            
       //}
        
    }
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        //myPiece = new Rectangle2D(100, 100, 10, 10);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setPaint(Color.BLUE);
        //g2d.fill(myPiece);
    }
    
}
