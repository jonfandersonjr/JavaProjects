/*
 * TCSS 305 - Tetris
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import model.Block;
import model.Board;
import model.Point;
import model.TetrisPiece;

/**
 * Class to display the next piece in a panel.
 * 
 * @author Jon Anderson
 * @version May 26
 */
public class NextPiecePanel extends JPanel implements Observer {

    /**
     * Auto generated serial ID number.
     */
    private static final long serialVersionUID = -3254087614079880441L;
    
    private boolean isI;
    
    private boolean isO;

    private Point[] myDrawPoint;

    private boolean isPlaying;

    private final int myBlockSize;
    
    private final GamePanel myGamePanel;

    public NextPiecePanel(final int theBlockSize, final GamePanel theGamePanel) {
        super();
        myGamePanel = theGamePanel;
        myBlockSize = theBlockSize;
        setBorder(BorderFactory.createStrokeBorder(new BasicStroke(3)));
    }

    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setPaint(myGamePanel.getBlockColor());

        if (isPlaying) {
            for (final Point p : myDrawPoint) {
                if (isO) {
                    theGraphics.fillRect((p.x() * myBlockSize) + (int) (2.2 * myBlockSize),
                                         (7 - p.y()) * myBlockSize - (int) (2.5 * myBlockSize),
                                         myBlockSize, myBlockSize);
                    g2d.setPaint(Color.BLACK);
                    theGraphics.drawRect((p.x() * myBlockSize) + (int) (2.2 * myBlockSize),
                                         (7 - p.y()) * myBlockSize - (int) (2.5 * myBlockSize),
                                         myBlockSize, myBlockSize);
                    g2d.setPaint(myGamePanel.getBlockColor());
                } else if (isI) {
                    theGraphics.fillRect((p.x() * myBlockSize) + (int) (2.5 * myBlockSize),
                                         (7 - p.y()) * myBlockSize - (int) (2.0 * myBlockSize),
                                         myBlockSize, myBlockSize);
                    g2d.setPaint(Color.BLACK);
                    theGraphics.drawRect((p.x() * myBlockSize) + (int) (2.5 * myBlockSize),
                                         (7 - p.y()) * myBlockSize - (int) (2.0 * myBlockSize),
                                         myBlockSize, myBlockSize);
                    g2d.setPaint(myGamePanel.getBlockColor());
                } else {
                    theGraphics.fillRect((p.x() * myBlockSize) + (3 * myBlockSize),
                                     (7 - p.y()) * myBlockSize - (int) (2.5 * myBlockSize),
                                     myBlockSize, myBlockSize);
                    g2d.setPaint(Color.BLACK);
                    theGraphics.drawRect((p.x() * myBlockSize) + (3 * myBlockSize),
                                         (7 - p.y()) * myBlockSize - (int) (2.5 * myBlockSize),
                                         myBlockSize, myBlockSize);
                    g2d.setPaint(myGamePanel.getBlockColor());
                }
            }
        }
    }

    @Override
    public void update(final Observable theObserv, final Object theObject) {
        if (theObserv instanceof Board) {
            if (theObject instanceof TetrisPiece) {
                myDrawPoint = ((TetrisPiece) theObject).getPoints();
                if (((TetrisPiece) theObject).getBlock() == Block.I) {
                    isI = true;
                } else {
                    isI = false;
                }
                if (((TetrisPiece) theObject).getBlock() == Block.O) {
                    isO = true;
                } else {
                    isO = false;
                }
                isPlaying = true;
                repaint();
            }

        }
    }
}
